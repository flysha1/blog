import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,b as t}from"./app-D4J0K0JA.js";const n={},i=t('<h1 id="_1-xss和csrf" tabindex="-1"><a class="header-anchor" href="#_1-xss和csrf"><span>1. XSS和CSRF</span></a></h1><h2 id="_1-xss-跨站脚本攻击" tabindex="-1"><a class="header-anchor" href="#_1-xss-跨站脚本攻击"><span>1. XSS（跨站脚本攻击）</span></a></h2><p><code>XSS</code> 攻击指的是跨站脚本攻击，是一种 <strong>代码注入攻击</strong>。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 <code>cookie</code> 等。</p><p><strong>避免方式</strong>：</p><ul><li><p>服务端拼接后返回 HTML 是一种避免 XSS 攻击的常见方法，也就是 SSR（Server-Side Rendering，服务端渲染），这种方式可以在服务端进行输入过滤和转义，从而避免恶意脚本的注入用服务端拼接后返回（不使用服务端渲染）</p></li><li><p>对一些敏感信息进行保护，比如 <code>cookie</code> 使用 <code>http-only</code>，使得脚本无法获取。</p></li><li><p>对用户输入的地方和变量都需要仔细检查长度和对 <code>”&lt;”,”&gt;”,”;”,”’”</code> 等字符做过滤</p></li></ul><h2 id="_2-csrf-跨站请求伪造" tabindex="-1"><a class="header-anchor" href="#_2-csrf-跨站请求伪造"><span>2. CSRF（跨站请求伪造）</span></a></h2><p><code>CSRF</code> 攻击的本质是利用 <code>cookie</code> 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p><p><strong>避免方式</strong>：</p><ul><li>添加验证码验证</li><li>使用 <code>token</code> 验证</li><li>限制 <code>cookie</code> 不能作为被第三方使用</li><li>进行同源检测</li></ul>',9),s=[i];function l(d,r){return c(),o("div",null,s)}const S=e(n,[["render",l],["__file","1.html.vue"]]),h=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/1.html","title":"1. XSS和CSRF","lang":"zh-CN","frontmatter":{"date":"2018-02-01T00:00:00.000Z","category":["前端技术"],"tag":["浏览器","面经"]},"headers":[{"level":2,"title":"1. XSS（跨站脚本攻击）","slug":"_1-xss-跨站脚本攻击","link":"#_1-xss-跨站脚本攻击","children":[]},{"level":2,"title":"2. CSRF（跨站请求伪造）","slug":"_2-csrf-跨站请求伪造","link":"#_2-csrf-跨站请求伪造","children":[]}],"git":{"createdTime":1709624313000,"updatedTime":1709624313000,"contributors":[{"name":"flysha1","email":"2903229312@qq.com","commits":1}]},"readingTime":{"minutes":1.02,"words":306},"filePathRelative":"前端技术/面试相关/浏览器/1.md","localizedDate":"2018年2月1日","excerpt":"\\n<h2>1. XSS（跨站脚本攻击）</h2>\\n<p><code>XSS</code> 攻击指的是跨站脚本攻击，是一种 <strong>代码注入攻击</strong>。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 <code>cookie</code> 等。</p>\\n<p><strong>避免方式</strong>：</p>\\n<ul>\\n<li>\\n<p>服务端拼接后返回 HTML 是一种避免 XSS 攻击的常见方法，也就是 SSR（Server-Side Rendering，服务端渲染），这种方式可以在服务端进行输入过滤和转义，从而避免恶意脚本的注入用服务端拼接后返回（不使用服务端渲染）</p>\\n</li>\\n<li>\\n<p>对一些敏感信息进行保护，比如 <code>cookie</code> 使用 <code>http-only</code>，使得脚本无法获取。</p>\\n</li>\\n<li>\\n<p>对用户输入的地方和变量都需要仔细检查长度和对 <code>”&lt;”,”&gt;”,”;”,”’”</code> 等字符做过滤</p>\\n</li>\\n</ul>"}');export{S as comp,h as data};
