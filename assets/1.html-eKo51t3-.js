import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,b as e}from"./app-U6uxE2hr.js";const t={},p=e(`<h1 id="词法语法" tabindex="-1"><a class="header-anchor" href="#词法语法"><span>词法语法</span></a></h1><p>ECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括标识符、控制符、行终止符、注释和空白符。</p><p>同样地，ECMAScript 也定义了一些关键字、字面量以及行尾分号补全的规则</p><h2 id="字符集" tabindex="-1"><a class="header-anchor" href="#字符集"><span>字符集</span></a></h2><p>JavaScript 程序使用 Unicode 字符集编写。Unicode 是 ASCII 和 Latin-1 的超集，并支持地球上几乎所有在使用的语言。ECMAScript3 要求 JavaScript 的实现必须支持 Unicode2.1 及后续版本，ECMAScript5 则要求支持 Unicode3 及后续版本。</p><h3 id="区分大小写" tabindex="-1"><a class="header-anchor" href="#区分大小写"><span>区分大小写</span></a></h3><p>JavaScript 是区分大小写的语言，也就是说，关键字、变量、函数名和所有的标识符（Identifier）都必须采取一致的大小写的形式。但是需要注意的是，HTML 和 CSS 并不区分大小写（尽管 XHTML 区分大小写），也就是说如果我们在用 JavaScript 控制 HTML 属性的时候对 HTML 来说 id 和 ID 没区别，但是 JavaScript 有区别。</p><p>🌰 代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> abc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Abc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aBc <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> abC <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">ABC</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">,</span> Abc<span class="token punctuation">,</span> aBc<span class="token punctuation">,</span> abC<span class="token punctuation">,</span> <span class="token constant">ABC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="空格、换行符和格式控制符" tabindex="-1"><a class="header-anchor" href="#空格、换行符和格式控制符"><span>空格、换行符和格式控制符</span></a></h3><p>JavaScript 会忽略程序中 标识（Token）之间的空格。多数情况下，JavaScript 同样会忽略换行符。由于可以在代码中随意使用空格和换行，因此可以采用整齐、一致的缩进来形成统一的编码风格，从而提高代码的可读性。</p><ul><li>空白字符 WhiteSpace</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>\\u0009    水平制表符        <span class="token operator">&lt;</span><span class="token constant">TAB</span><span class="token operator">&gt;</span>
\\u000B    垂直制表符        <span class="token operator">&lt;</span><span class="token constant">VT</span><span class="token operator">&gt;</span>
\\u000C    换页符            <span class="token operator">&lt;</span><span class="token constant">FF</span><span class="token operator">&gt;</span>
\\u0020    空格符            <span class="token operator">&lt;</span><span class="token constant">SP</span><span class="token operator">&gt;</span>
\\u00A0    非中断空格符      <span class="token operator">&lt;</span><span class="token constant">NBSP</span><span class="token operator">&gt;</span>
\\uFEFF    字符序标记
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>行终止符 LineTerminator</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>\\u000A    换行符        <span class="token operator">&lt;</span><span class="token constant">LF</span><span class="token operator">&gt;</span>
\\u000D    回车符        <span class="token operator">&lt;</span><span class="token constant">CR</span><span class="token operator">&gt;</span>
\\u2028    行分隔符      <span class="token operator">&lt;</span><span class="token constant">LS</span><span class="token operator">&gt;</span>
\\u2029    段落分割符     <span class="token operator">&lt;</span><span class="token constant">PS</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️ 注意：回车符加换行符在一起被解析成一个单行结束符</p></blockquote>`,16),o=[p];function c(l,r){return s(),n("div",null,o)}const u=a(t,[["render",c],["__file","1.html.vue"]]);export{u as default};
