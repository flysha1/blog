import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as e,c as o,a as n,e as p,d as l,b as c}from"./app-gpsbbifa.js";const i={},u=n("h1",{id:"_10-路径总和",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-路径总和"},[n("span",null,"10. 路径总和")])],-1),r={href:"https://leetcode.cn/problems/permutations/description/",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"题目",-1),k=c(`<p><em><strong>叶子节点</strong></em> 是指没有子节点的节点。</p><ul><li>示例1：</li></ul><figure><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" alt="示例1" tabindex="0" loading="lazy"><figcaption>示例1</figcaption></figure><p>输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</p><p>输出：true</p><p>解释：等于目标和的根节点到叶节点路径如上图所示。</p><ul><li>示例 2：</li></ul><figure><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" alt="示例2" tabindex="0" loading="lazy"><figcaption>示例2</figcaption></figure><p>输入：root = [1,2,3], targetSum = 5</p><p>输出：false</p><p>解释：树中存在两条根节点到叶子节点的路径： (1 --&gt; 2): 和为 3 (1 --&gt; 3): 和为 4 不存在 sum = 5 的根节点到叶子节点的路径。</p><ul><li>示例 3：</li></ul><p>输入：root = [], targetSum = 0</p><p>输出：false</p><p>解释：由于树是空的，所以不存在根节点到叶子节点的路径。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">targetSum</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">hasPathSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历到null节点</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历到叶子节点</span>
        <span class="token keyword">return</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token comment">// 如果满足这个就返回true。否则返回false</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不是上面的情况，则拆成两个子树的问题，其中一个true了就行</span>
    <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function m(v,f){const s=t("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[d,p("：给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。"),l(s)])]),k])}const h=a(i,[["render",m],["__file","10.html.vue"]]);export{h as default};
