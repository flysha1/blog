import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as d,c as p,d as a,w as l,a as n,e as s,b as t}from"./app-gpsbbifa.js";const u={},r=t('<h1 id="_5-盒模型" tabindex="-1"><a class="header-anchor" href="#_5-盒模型"><span>5. 盒模型</span></a></h1><h2 id="display" tabindex="-1"><a class="header-anchor" href="#display"><span>display</span></a></h2><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>none</code></td><td>隐藏元素</td></tr><tr><td><code>inline</code></td><td>（默认值）指定对象为内联元素，元素前后没有换行符</td></tr><tr><td><code>block</code></td><td>指定对象为块元素，元素前后会带有换行符</td></tr><tr><td><code>inline-block</code></td><td>指定对象为内联块元素</td></tr><tr><td><code>list-item</code></td><td>指定对象为列表项目</td></tr><tr><td><code>table</code></td><td>指定对象作为块元素级的表格，表格前后带有换行符</td></tr><tr><td><code>flex</code></td><td>弹性布局</td></tr><tr><td><code>grid</code></td><td>网格布局</td></tr></tbody></table><h3 id="行内元素与块级元素" tabindex="-1"><a class="header-anchor" href="#行内元素与块级元素"><span>行内元素与块级元素</span></a></h3><blockquote><p><code>display</code> 属性的 <code>inline</code>、<code>block</code> 和 <code>inline-block</code> 之间有什么区别？</p></blockquote><ul><li><code>inline</code>：元素 <strong>不会独占一行</strong>，设置 <code>width</code>、<code>height</code> 属性无效。但可以设置水平方向的 <code>margin</code> 和 <code>padding</code> 属性，不能设置垂直方向的 <code>padding</code> 和 <code>margin</code>；</li><li><code>block</code>：<strong>会独占一行</strong>，多个元素会另起一行，可以设置 <code>width</code>、<code>height</code>、<code>margin</code> 和 <code>padding</code> 属性；</li><li><code>inline-block</code>： 将对象设置为 <code>inline</code> 对象，但对象的内容作为 <code>block</code> 对象呈现，之后的内联对象会被排列在同一行内。</li></ul><p>对于行内元素和块级元素，其特点如下：</p><table><thead><tr><th></th><th>行内元素</th><th>块级元素</th></tr></thead><tbody><tr><td>宽高</td><td>设置宽高无效</td><td>可以设置宽高</td></tr><tr><td>边距</td><td>可以设置水平方向的 <code>margin</code> 和 <code>padding</code> 属性，不能设置垂直方向的 <code>margin</code> 和 <code>padding</code></td><td>设置 <code>margin</code> 和 <code>padding</code> 都有效</td></tr><tr><td>换行</td><td>不会自动换行</td><td>可以自动换行</td></tr><tr><td>排列</td><td></td><td>多个块状，默认排列从上到下</td></tr></tbody></table><h3 id="行内元素的空隙问题" tabindex="-1"><a class="header-anchor" href="#行内元素的空隙问题"><span>行内元素的空隙问题</span></a></h3><p><strong>问题说明</strong>：给两个或两个以上的元素设置 <code>display: inline-block</code> 或者 <code>display: inline</code>，将会导致它们之间产生一个微小的空隙。</p><p><strong>原理分析</strong>：原因是浏览器会将元素当作字词去解释，从而给每个元素之间添加一个字符的空隙。</p><p>下面的例子中，每个项目的右侧都有一个 <code>8px</code> 的空隙，但是使用 <code>display: inline-block</code> 而产生的小空隙将会使其变为 <code>12px</code>，这不是我们想要的效果。</p>',12),k=n("div",{class:"language-html line-numbers-mode","data-ext":"html","data-title":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目5"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-css line-numbers-mode","data-ext":"css","data-title":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},"li"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"display"),n("span",{class:"token punctuation"},":"),s(" inline-block"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},"li:not(:last-child)"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"margin-right"),n("span",{class:"token punctuation"},":"),s(" 8px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("p",null,[n("strong",null,"解决方法"),s("：通过给父元素设置 "),n("code",null,"font-size: 0"),s(" 可以简单地解决这个问题。")],-1),g=n("div",{class:"language-html line-numbers-mode","data-ext":"html","data-title":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),s("项目5"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-css line-numbers-mode","data-ext":"css","data-title":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},"ul"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"font-size"),n("span",{class:"token punctuation"},":"),s("0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},"li"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"display"),n("span",{class:"token punctuation"},":"),s(" inline-block"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"font-size"),n("span",{class:"token punctuation"},":"),s("17px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},"li:not(:last-child)"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"margin-right"),n("span",{class:"token punctuation"},":"),s(" 8px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=t(`<h2 id="width-和-height" tabindex="-1"><a class="header-anchor" href="#width-和-height"><span>width 和 height</span></a></h2><p>相关属性：</p><ul><li>minWidth</li><li>minHeight</li><li>maxWidth</li><li>maxHeight</li></ul><p>可取属性值：</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>auto</code></td><td>无特定高度值，取决于其它属性值</td></tr><tr><td><code>&lt;length&gt;</code></td><td>用长度值来定义高度。不允许负值</td></tr><tr><td><code>&lt;percentag&gt;</code></td><td>用百分比来定义高度。不允许负值</td></tr></tbody></table><p><strong>说明</strong>：对于 <code>&lt;img&gt;</code> 元素来说，若仅指定此属性，其 <code>width</code> 或 <code>height</code> 值将会根据图片源尺寸进行等比例缩放</p><h3 id="宽高自适应" tabindex="-1"><a class="header-anchor" href="#宽高自适应"><span>宽高自适应</span></a></h3><p>块级元素的流体特性主要体现在水平方向上。</p><p><code>width</code> 默认值是 <code>auto</code>。它所表现的含义是：</p><ul><li><strong>充分利用可用空间</strong>：例如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code> 这些元素的宽度默认是 100% 于父级容器的，这种充分利用空间行为称为 fill-available</li><li><strong>收缩与包裹</strong>：典型代表就是浮动、绝对定位、<code>inline-block</code> 元素或 <code>table</code> 元素，称为 <code>shrink-to-fit</code> 收缩到合适，CSS3 中 fit-content 就是这种宽度的表现</li><li><strong>收缩到最小</strong>：这个最容易出现在 <code>table-layout</code> 为 <code>auto</code> 的表格中</li><li><strong>超出容器限制</strong>：除非有明确的 <code>width</code> 相关设置，否则上面 3 种情况尺寸都不会主动超过父级容器宽度，但是也存在一些特殊情况。例如，内容很长的连续的英文和数字，或者内联元素被设置了 <code>white-space: nowrap</code></li></ul><p>除了盒子模型分为内在盒子和外在盒子，显示分内部显示和外部显示，同样地，尺寸也分 <em><strong>内部尺寸</strong></em> 和 <em><strong>外部尺寸</strong></em>。</p><h3 id="外部尺寸与流体特性" tabindex="-1"><a class="header-anchor" href="#外部尺寸与流体特性"><span>外部尺寸与流体特性</span></a></h3><h4 id="正常流宽度" tabindex="-1"><a class="header-anchor" href="#正常流宽度"><span>正常流宽度</span></a></h4><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">a</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;a&gt;</code> 标签元素 display 属性默认为 <code>inline</code>，因此设置 <code>display: block</code> 使其块状化绝对没有问题，但后面设置的 <code>width: 100%</code> 则会使其失去了流动性。</p><p>所谓流动性并非看上去的宽度 <code>100%</code> 显示那么简单，而是一种 <code>margin/border/padding/content</code> 内容区域自动分配水平空间的机制。</p><h4 id="格式化宽度" tabindex="-1"><a class="header-anchor" href="#格式化宽度"><span>格式化宽度</span></a></h4><p>格式化宽度仅在出现在 绝对定位模型 中，也就是出现在 <code>position</code> 属性值为 <code>absolute</code> 或 <code>fixed</code> 的元素中。在默认情况下，绝对定位元素的宽度表现是 包裹性，宽度由内部尺寸决定。</p><p>而对于非替换元素，当 <code>left/right</code> 或 <code>top/bottom </code>对立方位的属性值同时存在时，元素的宽度表现为 格式化宽度，其宽度大小相对于最近的具有定位特性（<code>position</code> 属性值不是 <code>static</code>）的祖先元素计算。</p><p>示例：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设该 <code>&lt;div&gt;</code> 元素最近的具有定位特性的祖先元素的宽度是 <code>1000</code> 像素，则这个 <code>&lt;div&gt;</code> 元素的宽度是 <code>960</code>（即 <code>1000-20-20</code>）像素。</p><h3 id="内部尺寸与流体特性" tabindex="-1"><a class="header-anchor" href="#内部尺寸与流体特性"><span>内部尺寸与流体特性</span></a></h3><p>内部尺寸指元素的尺寸由内部的元素决定，而非由外部容器决定。通过判断元素内是否由内容，也就是宽度为 <code>0</code> 时，则该元素宽度为内部尺寸。</p><h3 id="包裹性" tabindex="-1"><a class="header-anchor" href="#包裹性"><span>包裹性</span></a></h3><h4 id="首选最小宽度" tabindex="-1"><a class="header-anchor" href="#首选最小宽度"><span>首选最小宽度</span></a></h4><p><strong>首选最小宽度</strong>：指元素最适合的最小宽度。</p><p>若外部容器宽度为 <code>240</code> 像素，内部元素宽度设为 <code>0</code>，<code>inline-block</code> 元素的宽度根据其内部的图文表现。</p><ul><li>东亚文字最小宽度为每个汉字的宽度</li><li>西方最小宽度由特定的连续的英文字符单元决定。并非所有的英文字符都会组成连续单元，一般会终止于空格（普通空格）、短横线、问号以及其他非英文字符等。</li></ul><h2 id="margin" tabindex="-1"><a class="header-anchor" href="#margin"><span>margin</span></a></h2><p><code>margin</code> 属性为给定元素设置所有四个（上下左右）方向的外边距属性。</p><p>示例：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* 应用于所有边 */</span>
<span class="token property">margin</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
<span class="token property">margin</span><span class="token punctuation">:</span> -3px<span class="token punctuation">;</span>

<span class="token comment">/* 上边下边 | 左边右边 */</span>
<span class="token property">margin</span><span class="token punctuation">:</span> 5% auto<span class="token punctuation">;</span>

<span class="token comment">/* 上边 | 左边右边 | 下边 */</span>
<span class="token property">margin</span><span class="token punctuation">:</span> 1em auto 2em<span class="token punctuation">;</span>

<span class="token comment">/* 上边 | 右边 | 下边 | 左边 */</span>
<span class="token property">margin</span><span class="token punctuation">:</span> 2px 1em 0 auto<span class="token punctuation">;</span>

<span class="token comment">/* 全局值 */</span>
<span class="token property">margin</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>
<span class="token property">margin</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
<span class="token property">margin</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="叠加上下文" tabindex="-1"><a class="header-anchor" href="#叠加上下文"><span>叠加上下文</span></a></h3><p>负边距 <code>margin</code> 为负值时元素会依参考线向外偏移。</p><ul><li><code>margin-left</code> 和 <code>margin-top</code> 的参考线为文档流中左边元素和上面的元素（如无兄弟元素则为父元素的左内侧和上内侧）</li><li><code>margin-right</code> 和 <code>margin-bottom</code> 的参考线为元素本身的 <code>border</code> 右侧 和 <code>border</code> 下侧</li></ul><p>一般可以利用负边距来就行布局，但没有计算好的话就可能造成元素重叠。堆叠顺序由元素在文档中的先后位置决定，后出现的会在上面。</p><h2 id="padding" tabindex="-1"><a class="header-anchor" href="#padding"><span>padding</span></a></h2><p><code>padding</code> 用于设置元素所有四条边的内边距区域。</p><h2 id="box-sizing" tabindex="-1"><a class="header-anchor" href="#box-sizing"><span>box-sizing</span></a></h2><p><code>box-sizing</code> 用于定义文档如何计算一个元素的总宽度和总高度。</p><p>在 CSS 盒子模型的默认定义里，你对一个元素所设置的 <code>width</code> 与 <code>height</code> 只会应用到这个元素的内容区。如果这个元素有任何的 <code>border</code> 或 <code>padding</code> ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。</p><p>可取属性值：</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>content-box</code></td><td>标准盒模型，<code>对象实际宽度 = width + border + padding</code></td></tr><tr><td><code>border-box</code></td><td>怪异盒模型，<code>对象实际宽度 = width</code></td></tr></tbody></table><h2 id="box-shadow" tabindex="-1"><a class="header-anchor" href="#box-shadow"><span>box-shadow</span></a></h2><p><code>box-shadow</code> 用于定义元素的阴影。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">box-shadow</span><span class="token punctuation">:</span> none | &lt;shadow&gt; [<span class="token punctuation">,</span> &lt;shadow&gt;]*<span class="token punctuation">;</span>

<span class="token selector">&lt;shadow&gt; = inset? &amp;&amp; &lt;length&gt;</span><span class="token punctuation">{</span>2<span class="token punctuation">,</span>4<span class="token punctuation">}</span> &amp;&amp; &lt;color&gt;?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>第一个长度值定义元素的阴影水平偏移值。正值，阴影出现在元素 右侧；负值，则阴影出现在元素 左侧</li><li>第二个长度值定义元素的阴影垂直偏移值。正值，阴影出现在元素 底部；负值，则阴影出现在元素 顶部</li><li>第三个长度值定义元素的 阴影模糊值半径（如果提供了）。该 值越大阴影边缘越模糊，若该值为 0，阴影边缘不出现模糊。不允许负值</li><li>第四个长度值定义元素的 阴影外延值（如果提供了）。正值，阴影将 向四面扩展；负值，则阴影 向里收缩</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><ol><li><code>box-shadow</code> 可以设定多组阴影效果，每组参数值以逗号分隔。该属性可以对几乎所有元素的生成框产生阴影。如果元素同时设置了 <code>border-radius</code>，阴影也会有圆角效果。</li><li>如果定义了多组阴影效果，它们的 <code>z-ordering</code> 和多个 <code>text-shadow</code> 规则相同，第一个阴影在最上面，以此类推</li></ol></div><p>示例：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* x 偏移量 | y 偏移量 | 阴影颜色 */</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> 60px -16px teal<span class="token punctuation">;</span>

<span class="token comment">/* x 偏移量 | y 偏移量 | 阴影模糊半径 | 阴影颜色 */</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> 10px 5px 5px black<span class="token punctuation">;</span>

<span class="token comment">/* x 偏移量 | y 偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> 2px 2px 2px 1px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 插页 (阴影向内) | x 偏移量 | y 偏移量 | 阴影颜色 */</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 5em 1em gold<span class="token punctuation">;</span>

<span class="token comment">/* 任意数量的阴影，以逗号分隔 */</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span>
  3px 3px red<span class="token punctuation">,</span>
  -1em 0 0.4em olive<span class="token punctuation">;</span>

<span class="token comment">/* 全局关键字 */</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快速生成工具：</p>`,53),x={href:"https://html-css-js.com/css/generator/box-shadow/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://cssgenerator.org/box-shadow-css-generator.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://getcssscan.com/css-box-shadow-examples",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="outline" tabindex="-1"><a class="header-anchor" href="#outline"><span>outline</span></a></h2><p><code>outline</code> 为复合属性，用于设置或检索对象外的线条轮廓。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">outline</span><span class="token punctuation">:</span> &lt;outline-width&gt; || &lt;outline-style&gt; || &lt;outline-color&gt;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>outline</code> 不占据布局空间，不会影响元素的尺寸，绘制于元素内容周围</li><li><code>outline</code> 通常是矩形，也可能是非矩形</li><li><code>outline</code> 不允许像 <code>boder</code> 那样分拆为 <code>border-top</code> 或 <code>border-right</code></li></ul>`,5);function w(E,A){const o=c("CodeDemo"),e=c("ExternalLinkIcon");return d(),p("div",null,[r,a(o,{id:"code-demo-185",type:"normal",title:"%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%9A%84%E7%A9%BA%E9%9A%99%E9%97%AE%E9%A2%98",code:"eJyrVsooyc1RslKyKc2xi8lTAAKbnEy7lwt3Pp+9ztBGH8hGFzXCKmqMVdQEq6gpVNRGH2ypko5ScnEx0A05mdUQpSmZxQU5iZVWCpl5OZl5qbpJOfnJ2dYxebUxQL5VXn6JhlVOYnGJbnJGZk6KpgJYV25iUXpmnm5RZnpGiZWCRUEFRL1SLQDg0VPC"},{default:l(()=>[k,h]),_:1}),m,a(o,{id:"code-demo-192",type:"normal",title:"%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%9A%84%E7%A9%BA%E9%9A%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3",code:"eJyrVsooyc1RslKyKc2xi8lTAAKbnEy7lwt3Pp+9ztBGH8hGFzXCKmqMVdQEq6gpVNRGH2ypko5ScnEx0A2lOdUQpWn5eSW6xZlVqVYG1jF5tTF5OZlQmZTM4oKcxEorhUygWF6qblJOfnI2UA2qLkPzggqYRqu8/BINq5zE4hLd5IzMnBRNBbBRuYlF6Zl5ukWZ6RklVgoWMPVKtQB3tmNr"},{default:l(()=>[g,b]),_:1}),v,n("p",null,[n("a",x,[s("Box-Shadow CSS Generator"),a(e)])]),n("p",null,[n("a",y,[s("Box Shadow CSS Generator"),a(e)])]),n("p",null,[n("a",f,[s("阴影示例模版"),a(e)])]),_])}const S=i(u,[["render",w],["__file","5.html.vue"]]);export{S as default};
