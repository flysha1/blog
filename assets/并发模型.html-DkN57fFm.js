import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as o,a as e,e as t,d as l,w as i,b as r,o as c}from"./app-D4J0K0JA.js";const p={},d=r('<h1 id="并发模型" tabindex="-1"><a class="header-anchor" href="#并发模型"><span>并发模型</span></a></h1><h2 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释"><span>名词解释</span></a></h2><p>在了解 JavaScript 单线程、非阻塞机制之前，先了解几组易混淆的概念。</p><p>进程和线程的概念以及关系：</p><ul><li><strong>进程</strong>（Process）：进程是系统资源分配和调度的单元。一个运行着的程序就对应了一个进程。一个进程包括了运行中的程序和程序所使用到的内存和系统资源。</li><li><strong>线程</strong>（Thread）：线程是进程下的执行者，一个进程至少开启一个线程（主线程），也可以开启多个线程。</li></ul><p>并行和并发的概念：</p><ul><li><strong>并行</strong>（Parallelism）：指程序的运行状态，在同一时间内有几件事情并行在处理。由于一个线程在同一时间只能处理一件事情，所以并行需要多个线程在同一时间执行多件事情。</li><li><strong>并发</strong>（Concurrency）：指程序的设计结构，在同一时间内多件事情能被交替地处理。重点是，在某个时间内只有一件事情在执行。比如单核 CPU 能实现多任务运行的过程就是并发。</li></ul><p>阻塞和非阻塞的概念：</p><ul><li><strong>阻塞</strong>（Blocking）：阻塞是指调用在等待的过程中线程被挂起（CPU 资源被分配到其他地方去）</li><li><strong>非阻塞</strong>（Non-blocking）：非阻塞是指等待的过程 CPU 资源还在该线程中，线程还能做其他的事情</li></ul><p>再来区分单线程和多线程的区别：</p><ul><li><strong>单线程</strong>：从头执行到尾，逐行执行，如果其中一行代码报错，那么剩下代码将不再执行。同时容易代码阻塞。</li><li><strong>多线程</strong>：代码运行的环境不同，各线程独立，互不影响，避免阻塞。</li></ul><p>同步与异步的概念：</p><ul><li><strong>同步</strong>（Synchronous）：程序发出调用的时候，一直等待直到返回结果，没有结果之前不会返回。也就是，同步时调用者主动等待调用过程，且能立即得到结果的。</li><li><strong>异步</strong>（Asynchronous）：程序发出调用之后，无法立即得到结果，需要额外的操作才能得到预期的结果是为异步。</li></ul><h2 id="运行环境" tabindex="-1"><a class="header-anchor" href="#运行环境"><span>运行环境</span></a></h2><p>JavaScript 的运行通常是在浏览器环境中进行的，具体由 JavaScript 引擎去解析和运行。</p><h3 id="浏览器线程" tabindex="-1"><a class="header-anchor" href="#浏览器线程"><span>浏览器线程</span></a></h3><p>目前最为流行的浏览器为：Chrome、IE、Safari、Firefox、Opera。浏览器的内核是多线程的，通常由以下几个常驻的线程组成：</p><ul><li>渲染引擎线程：负责页面的渲染</li><li>JavaScript 引擎线程：负责 JavaScript 的解析和执行</li><li>定时触发器线程：处理定时事件，比如 <code>setTimeout</code>、<code>setInterval</code></li><li>浏览器事件触发线程：处理 DOM 事件</li><li>异步 HTTP 请求线程：处理 HTTP 请求</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>渲染线程和 JavaScript 引擎线程是 <strong>互斥</strong> 的。渲染线程在执行任务的时候，JavaScript 引擎线程会被挂起。因为 JavaScript 可以操作 DOM，若在渲染中 JavaScript 处理了 DOM，浏览器可能会不知所措了。</p></div><h3 id="内核引擎" tabindex="-1"><a class="header-anchor" href="#内核引擎"><span>内核引擎</span></a></h3><p>通常讲到浏览器的时候，我们会说到两个浏览器的核心组件：<strong>渲染引擎</strong>（Rendering Engine）和 <strong>JavaScript 解释器</strong>（JavaScript Interpreter）。</p><table><thead><tr><th style="text-align:left;">浏览器厂商</th><th style="text-align:left;">渲染引擎</th><th style="text-align:left;">JavaScript 解释器（引擎）</th></tr></thead><tbody><tr><td style="text-align:left;">Chrome</td><td style="text-align:left;">Webkit =&gt; Blink</td><td style="text-align:left;">V8</td></tr><tr><td style="text-align:left;">Safari</td><td style="text-align:left;">Webkit</td><td style="text-align:left;">Nitro</td></tr><tr><td style="text-align:left;">Firefox</td><td style="text-align:left;">Gecko</td><td style="text-align:left;">SpiderMonky / TraceMonkey / JaegerMonkey</td></tr><tr><td style="text-align:left;">Opera</td><td style="text-align:left;">Presto =&gt; Blink</td><td style="text-align:left;">Linear A / Linear B / Futhark / Carakan</td></tr><tr><td style="text-align:left;">Internet Explorer</td><td style="text-align:left;">Trident =&gt; EdgeHTML</td><td style="text-align:left;">JScript / Chakra（9+）</td></tr><tr><td style="text-align:left;">Edge</td><td style="text-align:left;">EdgeHTML =&gt; Chromium</td><td style="text-align:left;">Chakra</td></tr></tbody></table><blockquote><p>注：Webkit 引擎包含 WebCore 排版引擎及 JavaScript Core 解析引擎</p></blockquote><p>不同的渲染引擎对同一个样式的实现不一致，就导致了经常被人诟病的浏览器样式兼容性问题。</p>',24),g=r('<h2 id="单线程" tabindex="-1"><a class="header-anchor" href="#单线程"><span>单线程</span></a></h2><p>JavaScript 的<strong>单线程</strong>，与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准呢？</p><p>所以，为了避免复杂性，从诞生之初以来，JavaScript 运行环境就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>JavaScript 的单线程是指一个程序进程（在浏览器运行环境中运行的就是浏览器进程）中只有一个 JavaScript 的执行线程，同一时刻内只会有一段 JavaScript 代码在执行。而异步机制是运行环境的两个或以上常驻线程共同完成的。</p></div><h2 id="任务队列" tabindex="-1"><a class="header-anchor" href="#任务队列"><span>任务队列</span></a></h2><p>JavaScript 中的程序任务可以分为两种：</p><ul><li><strong>同步任务</strong>（Synchronous）：同步任务在主线程上调用之后需要一直等待，只有当前任务执行完毕后，才能执行下一个任务</li><li><strong>异步任务</strong>（Asynchronous）：异步任务会在主线程先执行一部分，然后退出主线程至专用线程中执行。在异步任务准备就绪后，会被推进任务队列等待（Task Queue），当主线程空闲时，JavaScript 解释器会执行一次事件循环（EventLoop）将事件队列中首个事件推进主线程执行</li></ul><p>具体来说，<strong>异步执行的运行机制</strong> 如下：</p>',9),h=e("li",null,"同步任务执行完成并返回结果后退出执行上下文栈；异步任务执行一部分后，退出主线程的执行上下文栈，推进至运行环境的专用线程中继续执行",-1),E=e("li",null,"当运行环境的专用线程中的异步任务准备就绪后，将被推至任务队列（Task Queue）中等待执行",-1),u=e("li",null,"主线程的执行上下文栈中的所有任务执行完毕后，JavaScript 解释器就会通过事件循环机制检查任务队列中是否存在等待执行的事件。如果存在，则队首的异步任务将结束等待状态，进入执行上下文执行",-1),v=e("li",null,"JavaScript 主线程运行期间将不断重复上面第四步",-1);function f(S,A){const a=s("RouteLink");return c(),o("div",null,[d,e("p",null,[t("JavaScript 解释器可以说是 JavaScript 虚拟机，负责 JavaScript 代码的解析和执行。这里 "),l(a,{to:"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/1.html"},{default:i(()=>[t("编译阶段")]),_:1}),t(" 有详细解读。")]),g,e("ol",null,[e("li",null,[t("所有同步任务及异步任务按照 "),l(a,{to:"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/1.html"},{default:i(()=>[t("编译原理")]),_:1}),t(" 在主线程上执行，形成一个 "),l(a,{to:"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/1.html"},{default:i(()=>[t("执行上下文栈")]),_:1}),t("（Execution Context Stack）")]),h,E,u,v])])}const y=n(p,[["render",f],["__file","并发模型.html.vue"]]),m=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B.html","title":"并发模型","lang":"zh-CN","frontmatter":{"order":1,"date":"2018-01-01T00:00:00.000Z","category":["前端技术"],"tag":["JavaScript"]},"headers":[{"level":2,"title":"名词解释","slug":"名词解释","link":"#名词解释","children":[]},{"level":2,"title":"运行环境","slug":"运行环境","link":"#运行环境","children":[{"level":3,"title":"浏览器线程","slug":"浏览器线程","link":"#浏览器线程","children":[]},{"level":3,"title":"内核引擎","slug":"内核引擎","link":"#内核引擎","children":[]}]},{"level":2,"title":"单线程","slug":"单线程","link":"#单线程","children":[]},{"level":2,"title":"任务队列","slug":"任务队列","link":"#任务队列","children":[]}],"git":{"createdTime":1725263091000,"updatedTime":1725263091000,"contributors":[{"name":"flysha1","email":"2903229312@qq.com","commits":1}]},"readingTime":{"minutes":5.79,"words":1737},"filePathRelative":"前端技术/JavaScript/核心模块/并发模型/并发模型.md","localizedDate":"2018年1月1日","excerpt":"\\n<h2>名词解释</h2>\\n<p>在了解 JavaScript 单线程、非阻塞机制之前，先了解几组易混淆的概念。</p>\\n<p>进程和线程的概念以及关系：</p>\\n<ul>\\n<li><strong>进程</strong>（Process）：进程是系统资源分配和调度的单元。一个运行着的程序就对应了一个进程。一个进程包括了运行中的程序和程序所使用到的内存和系统资源。</li>\\n<li><strong>线程</strong>（Thread）：线程是进程下的执行者，一个进程至少开启一个线程（主线程），也可以开启多个线程。</li>\\n</ul>\\n<p>并行和并发的概念：</p>\\n<ul>\\n<li><strong>并行</strong>（Parallelism）：指程序的运行状态，在同一时间内有几件事情并行在处理。由于一个线程在同一时间只能处理一件事情，所以并行需要多个线程在同一时间执行多件事情。</li>\\n<li><strong>并发</strong>（Concurrency）：指程序的设计结构，在同一时间内多件事情能被交替地处理。重点是，在某个时间内只有一件事情在执行。比如单核 CPU 能实现多任务运行的过程就是并发。</li>\\n</ul>"}');export{y as comp,m as data};
