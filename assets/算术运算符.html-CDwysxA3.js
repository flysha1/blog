import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as e,a as t,e as s,d as n,w as a,r as k,o as r}from"./app-wuU-nyN7.js";const p={},o={style:{"text-align":"left"}},g={style:{"text-align":"left"}};function A(y,i){const l=k("RouteLink");return r(),h("div",null,[i[17]||(i[17]=e('<h1 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h1><p>算术运算符使用数值（字面量或者变量）作为操作数进行运算并返回一个数值。</p><p>标准的算术运算符就是加减乘除 <code>+</code>、<code>-</code>、<code>*</code> 和 <code>/</code>。</p><p>当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生 <code>Infinity</code> ）。</p>',4)),t("table",null,[i[16]||(i[16]=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"运算符"),t("th",{style:{"text-align":"left"}},"描述"),t("th",{style:{"text-align":"left"}},"示例")])],-1)),t("tbody",null,[i[8]||(i[8]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"+")]),t("td",{style:{"text-align":"left"}},"加法"),t("td",{style:{"text-align":"left"}},[t("code",null,"1 + 1 = 2")])],-1)),i[9]||(i[9]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"-")]),t("td",{style:{"text-align":"left"}},"减法"),t("td",{style:{"text-align":"left"}},[t("code",null,"2 - 1 = 1")])],-1)),i[10]||(i[10]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"*")]),t("td",{style:{"text-align":"left"}},"乘法"),t("td",{style:{"text-align":"left"}},[t("code",null,"3 * 3 = 9")])],-1)),i[11]||(i[11]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"/")]),t("td",{style:{"text-align":"left"}},"除法"),t("td",{style:{"text-align":"left"}},[t("code",null,"10 / 5 = 2")])],-1)),i[12]||(i[12]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"%")]),t("td",{style:{"text-align":"left"}},"求余，返回相除后余值"),t("td",{style:{"text-align":"left"}},[t("code",null,"12 % 5 = 2")])],-1)),t("tr",null,[i[2]||(i[2]=t("td",{style:{"text-align":"left"}},[t("code",null,"++")],-1)),i[3]||(i[3]=t("td",{style:{"text-align":"left"}},"自增（更新运算符），分为前自增和后自增",-1)),t("td",o,[i[1]||(i[1]=s("具体参考 ")),n(l,{to:"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9B%B4%E6%96%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html"},{default:a(()=>i[0]||(i[0]=[s("更新运算符")])),_:1})])]),t("tr",null,[i[6]||(i[6]=t("td",{style:{"text-align":"left"}},[t("code",null,"--")],-1)),i[7]||(i[7]=t("td",{style:{"text-align":"left"}},"自减（更新运算符），分为前自减和后自减",-1)),t("td",g,[i[5]||(i[5]=s("具体参考 ")),n(l,{to:"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9B%B4%E6%96%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html"},{default:a(()=>i[4]||(i[4]=[s("更新运算符")])),_:1})])]),i[13]||(i[13]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"-")]),t("td",{style:{"text-align":"left"}},"一元负值符，返回操作数的负值"),t("td",{style:{"text-align":"left"}},[t("code",null,"-")])],-1)),i[14]||(i[14]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"+")]),t("td",{style:{"text-align":"left"}},"一元正值符，若操作数在操作前非数字类型，将试图将其转换成数字类型"),t("td",{style:{"text-align":"left"}},[t("code",null,"+foo")])],-1)),i[15]||(i[15]=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"**")]),t("td",{style:{"text-align":"left"}},"指数运算符，计算 base（底数） 的 exponent（指数）次方"),t("td",{style:{"text-align":"left"}},[t("code",null,"2 ** 3 = 8")])],-1))])]),i[18]||(i[18]=e(`<h2 id="实践示例" tabindex="-1"><a class="header-anchor" href="#实践示例"><span>实践示例</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// -1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">+-+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现指数运算符" tabindex="-1"><a class="header-anchor" href="#实现指数运算符"><span>实现指数运算符</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculateExponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">exponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">exponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> base</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> base</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculateExponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">exponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4))])}const f=d(p,[["render",A],["__file","算术运算符.html.vue"]]),c=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"算术运算符","lang":"zh-CN","frontmatter":{"order":7,"date":"2018-01-01T00:00:00.000Z","category":["前端技术"],"tag":["JavaScript"]},"headers":[{"level":2,"title":"实践示例","slug":"实践示例","link":"#实践示例","children":[{"level":3,"title":"实现指数运算符","slug":"实现指数运算符","link":"#实现指数运算符","children":[]}]}],"git":{"createdTime":1727331628000,"updatedTime":1727331628000,"contributors":[{"name":"liyanxin","email":"liyanxin@conforx.com","commits":1}]},"readingTime":{"minutes":1.15,"words":345},"filePathRelative":"前端技术/JavaScript/基本语法/运算符/算术运算符.md","localizedDate":"2018年1月1日","excerpt":"\\n<p>算术运算符使用数值（字面量或者变量）作为操作数进行运算并返回一个数值。</p>\\n<p>标准的算术运算符就是加减乘除 <code>+</code>、<code>-</code>、<code>*</code> 和 <code>/</code>。</p>\\n<p>当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生 <code>Infinity</code> ）。</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">运算符</th>\\n<th style=\\"text-align:left\\">描述</th>\\n<th style=\\"text-align:left\\">示例</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\"><code>+</code></td>\\n<td style=\\"text-align:left\\">加法</td>\\n<td style=\\"text-align:left\\"><code>1 + 1 = 2</code></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>-</code></td>\\n<td style=\\"text-align:left\\">减法</td>\\n<td style=\\"text-align:left\\"><code>2 - 1 = 1</code></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>*</code></td>\\n<td style=\\"text-align:left\\">乘法</td>\\n<td style=\\"text-align:left\\"><code>3 * 3 = 9</code></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>/</code></td>\\n<td style=\\"text-align:left\\">除法</td>\\n<td style=\\"text-align:left\\"><code>10 / 5 = 2</code></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>%</code></td>\\n<td style=\\"text-align:left\\">求余，返回相除后余值</td>\\n<td style=\\"text-align:left\\"><code>12 % 5 = 2</code></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>++</code></td>\\n<td style=\\"text-align:left\\">自增（更新运算符），分为前自增和后自增</td>\\n<td style=\\"text-align:left\\">具体参考 <a href=\\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9B%B4%E6%96%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html\\" target=\\"_blank\\">更新运算符</a></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>--</code></td>\\n<td style=\\"text-align:left\\">自减（更新运算符），分为前自减和后自减</td>\\n<td style=\\"text-align:left\\">具体参考 <a href=\\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9B%B4%E6%96%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html\\" target=\\"_blank\\">更新运算符</a></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>-</code></td>\\n<td style=\\"text-align:left\\">一元负值符，返回操作数的负值</td>\\n<td style=\\"text-align:left\\"><code>-</code></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>+</code></td>\\n<td style=\\"text-align:left\\">一元正值符，若操作数在操作前非数字类型，将试图将其转换成数字类型</td>\\n<td style=\\"text-align:left\\"><code>+foo</code></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>**</code></td>\\n<td style=\\"text-align:left\\">指数运算符，计算 base（底数） 的 exponent（指数）次方</td>\\n<td style=\\"text-align:left\\"><code>2 ** 3 = 8</code></td>\\n</tr>\\n</tbody>\\n</table>"}');export{f as comp,c as data};
